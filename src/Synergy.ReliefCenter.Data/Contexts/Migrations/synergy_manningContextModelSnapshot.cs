// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Synergy.ReliefCenter.Data.Models;

namespace Synergy.ReliefCenter.Data.Contexts.Migrations
{
    [DbContext(typeof(synergy_manningContext))]
    partial class synergy_manningContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:Collation", "en_US.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.AgentLetter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AgentId")
                        .HasColumnType("bigint")
                        .HasColumnName("agent_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<long>("ReliefId")
                        .HasColumnType("bigint")
                        .HasColumnName("relief_id");

                    b.Property<long>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_agent_letters");

                    b.HasIndex(new[] { "AgentId" }, "index_agent_letters_on_agent_id")
                        .HasDatabaseName("ix_agent_letters_agent_id");

                    b.HasIndex(new[] { "ReliefId" }, "index_agent_letters_on_relief_id")
                        .HasDatabaseName("ix_agent_letters_relief_id");

                    b.HasIndex(new[] { "SeafarerId" }, "index_agent_letters_on_seafarer_id")
                        .HasDatabaseName("ix_agent_letters_seafarer_id");

                    b.ToTable("agent_letters");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.AgentNotificationLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("AgentId")
                        .HasColumnType("bigint")
                        .HasColumnName("agent_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<DateTime?>("EmailFailedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("email_failed_at");

                    b.Property<string>("EmailFailedReason")
                        .HasColumnType("character varying")
                        .HasColumnName("email_failed_reason");

                    b.Property<DateTime?>("EmailSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("email_sent_at");

                    b.Property<long?>("NotifiableId")
                        .HasColumnType("bigint")
                        .HasColumnName("notifiable_id");

                    b.Property<string>("NotifiableType")
                        .HasColumnType("character varying")
                        .HasColumnName("notifiable_type");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_agent_notification_logs");

                    b.HasIndex(new[] { "AgentId" }, "index_agent_notification_logs_on_agent_id")
                        .HasDatabaseName("ix_agent_notification_logs_agent_id");

                    b.HasIndex(new[] { "NotifiableType", "NotifiableId" }, "index_notification_logs_on_notifiable_type_and_notifiable_id")
                        .HasDatabaseName("ix_agent_notification_logs_notifiable_type_notifiable_id");

                    b.ToTable("agent_notification_logs");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.ArInternalMetadatum", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying")
                        .HasColumnName("key");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("ar_internal_metadata_pkey");

                    b.ToTable("ar_internal_metadata");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.Audit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Action")
                        .HasColumnType("character varying")
                        .HasColumnName("action");

                    b.Property<string>("AppName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("app_name")
                        .HasDefaultValueSql("'Ahoy'::character varying");

                    b.Property<long?>("AuditableId")
                        .HasColumnType("bigint")
                        .HasColumnName("auditable_id");

                    b.Property<string>("AuditableType")
                        .HasColumnType("character varying")
                        .HasColumnName("auditable_type");

                    b.Property<string>("AuditedChanges")
                        .HasColumnType("jsonb")
                        .HasColumnName("audited_changes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<string>("CreatedByRole")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_audits");

                    b.HasIndex(new[] { "AuditableType", "AuditableId" }, "index_audits_on_auditable_type_and_auditable_id")
                        .HasDatabaseName("ix_audits_auditable_type_auditable_id");

                    b.ToTable("audits");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.AvailabilityRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<long?>("ReliefId")
                        .HasColumnType("bigint")
                        .HasColumnName("relief_id");

                    b.Property<long>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_availability_requests");

                    b.HasIndex(new[] { "ReliefId" }, "index_availability_requests_on_relief_id")
                        .HasDatabaseName("ix_availability_requests_relief_id");

                    b.HasIndex(new[] { "SeafarerId" }, "index_availability_requests_on_seafarer_id")
                        .HasDatabaseName("ix_availability_requests_seafarer_id");

                    b.ToTable("availability_requests");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.ContractForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint")
                        .HasColumnName("vessel_contract_id");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.HasKey("Id")
                        .HasName("pk_contract_form");

                    b.HasIndex(new[] { "ContractId" }, "index_contract_form_on_contract_id")
                        .HasDatabaseName("ix_contract_form_vessel_contract_id");

                    b.ToTable("ContractForm");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.ContractReviewer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<DateTime>("ApprovedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_on");

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint")
                        .HasColumnName("contract_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ReviewerId")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_id");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_contract_reviewers");

                    b.HasIndex(new[] { "ContractId" }, "index_contract_reviewer_on_contract_id")
                        .HasDatabaseName("ix_contract_reviewers_contract_id");

                    b.ToTable("ContractReviewers");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.DepartureChecklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_departure_checklists");

                    b.ToTable("departure_checklists");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.FeedbackHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<long?>("ReliefId")
                        .HasColumnType("bigint")
                        .HasColumnName("relief_id");

                    b.Property<long?>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_feedback_histories");

                    b.HasIndex(new[] { "ReliefId" }, "index_feedback_histories_on_relief_id")
                        .HasDatabaseName("ix_feedback_histories_relief_id");

                    b.HasIndex(new[] { "SeafarerId" }, "index_feedback_histories_on_seafarer_id")
                        .HasDatabaseName("ix_feedback_histories_seafarer_id");

                    b.ToTable("feedback_histories");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.FleetCombinationMatrix", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<double?>("ExperienceInRank")
                        .HasColumnType("double precision")
                        .HasColumnName("experience_in_rank");

                    b.Property<double?>("ExperienceInSynergy")
                        .HasColumnType("double precision")
                        .HasColumnName("experience_in_synergy");

                    b.Property<double?>("ExperienceInVesselType")
                        .HasColumnType("double precision")
                        .HasColumnName("experience_in_vessel_type");

                    b.Property<long?>("FleetId")
                        .HasColumnType("bigint")
                        .HasColumnName("fleet_id");

                    b.Property<bool?>("IsAppraisalBased")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_appraisal_based")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("IsSalaryBased")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_salary_based")
                        .HasDefaultValueSql("false");

                    b.Property<long?>("RankCombinationId")
                        .HasColumnType("bigint")
                        .HasColumnName("rank_combination_id");

                    b.Property<double?>("Salary")
                        .HasColumnType("double precision")
                        .HasColumnName("salary");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_fleet_combination_matrices");

                    b.HasIndex(new[] { "FleetId" }, "index_fleet_combination_matrices_on_fleet_id")
                        .HasDatabaseName("ix_fleet_combination_matrices_fleet_id");

                    b.HasIndex(new[] { "RankCombinationId" }, "index_fleet_combination_matrices_on_rank_combination_id")
                        .HasDatabaseName("ix_fleet_combination_matrices_rank_combination_id");

                    b.ToTable("fleet_combination_matrices");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.Interview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("date")
                        .HasColumnName("approved_date");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("character varying")
                        .HasColumnName("assigned_to");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<string>("SfId")
                        .HasColumnType("character varying")
                        .HasColumnName("sf_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_interviews");

                    b.HasIndex(new[] { "AssignedTo" }, "index_interviews_on_assigned_to")
                        .HasDatabaseName("ix_interviews_assigned_to");

                    b.HasIndex(new[] { "SfId" }, "index_interviews_on_sf_id")
                        .HasDatabaseName("ix_interviews_sf_id");

                    b.ToTable("interviews");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.OpenCase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CaseFor")
                        .HasColumnType("character varying")
                        .HasColumnName("case_for");

                    b.Property<long?>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("case_id");

                    b.Property<string>("CaseType")
                        .HasColumnType("character varying")
                        .HasColumnName("case_type");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<long?>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<string>("ShoreEmployeeId")
                        .HasColumnType("character varying")
                        .HasColumnName("shore_employee_id");

                    b.Property<string>("ShoreEmployeeName")
                        .HasColumnType("character varying")
                        .HasColumnName("shore_employee_name");

                    b.Property<string>("State")
                        .HasColumnType("character varying")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_open_cases");

                    b.HasIndex(new[] { "CaseType", "CaseId" }, "index_open_cases_on_case_type_and_case_id")
                        .HasDatabaseName("ix_open_cases_case_type_case_id");

                    b.ToTable("open_cases");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.RankCombination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string[]>("RankIds")
                        .HasColumnType("text[]")
                        .HasColumnName("rank_ids");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_rank_combinations");

                    b.ToTable("rank_combinations");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.RecommendationList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool?>("IsSystemGenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_system_generated")
                        .HasDefaultValueSql("false");

                    b.Property<long?>("RecommendedSeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("recommended_seafarer_id");

                    b.Property<long?>("ReliefId")
                        .HasColumnType("bigint")
                        .HasColumnName("relief_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_recommendation_lists");

                    b.HasIndex(new[] { "RecommendedSeafarerId" }, "index_recommendation_lists_on_recommended_seafarer_id")
                        .HasDatabaseName("ix_recommendation_lists_recommended_seafarer_id");

                    b.HasIndex(new[] { "ReliefId" }, "index_recommendation_lists_on_relief_id")
                        .HasDatabaseName("ix_recommendation_lists_relief_id");

                    b.ToTable("recommendation_lists");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.Relief", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DocumentationState")
                        .HasColumnType("character varying")
                        .HasColumnName("documentation_state");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying")
                        .HasColumnName("reason");

                    b.Property<string>("ReliefState")
                        .HasColumnType("character varying")
                        .HasColumnName("relief_state");

                    b.Property<long?>("RelieverSeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("reliever_seafarer_id");

                    b.Property<long?>("RelieverSfStatusCode")
                        .HasColumnType("bigint")
                        .HasColumnName("reliever_sf_status_code");

                    b.Property<string>("RelieverTravelState")
                        .HasColumnType("character varying")
                        .HasColumnName("reliever_travel_state");

                    b.Property<long?>("RelievingSfStatusCode")
                        .HasColumnType("bigint")
                        .HasColumnName("relieving_sf_status_code");

                    b.Property<string>("RelievingTravelState")
                        .HasColumnType("character varying")
                        .HasColumnName("relieving_travel_state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.Property<long?>("VesselContractId")
                        .HasColumnType("bigint")
                        .HasColumnName("vessel_contract_id");

                    b.HasKey("Id")
                        .HasName("pk_reliefs");

                    b.HasIndex(new[] { "RelieverSeafarerId" }, "index_reliefs_on_reliever_seafarer_id")
                        .HasDatabaseName("ix_reliefs_reliever_seafarer_id");

                    b.HasIndex(new[] { "RelieverSfStatusCode" }, "index_reliefs_on_reliever_sf_status_code")
                        .HasDatabaseName("ix_reliefs_reliever_sf_status_code");

                    b.HasIndex(new[] { "RelievingSfStatusCode" }, "index_reliefs_on_relieving_sf_status_code")
                        .HasDatabaseName("ix_reliefs_relieving_sf_status_code");

                    b.HasIndex(new[] { "VesselContractId" }, "index_reliefs_on_vessel_contract_id")
                        .HasDatabaseName("ix_reliefs_vessel_contract_id");

                    b.ToTable("reliefs");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.SchemaMigration", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("character varying")
                        .HasColumnName("version");

                    b.HasKey("Version")
                        .HasName("schema_migrations_pkey");

                    b.ToTable("schema_migrations");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.SeafarerChecklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DepartureChecklistId")
                        .HasColumnType("bigint")
                        .HasColumnName("departure_checklist_id");

                    b.Property<bool?>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed")
                        .HasDefaultValueSql("false");

                    b.Property<long?>("SeafarerDepartureId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_departure_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_seafarer_checklists");

                    b.HasIndex(new[] { "DepartureChecklistId" }, "index_seafarer_checklists_on_departure_checklist_id")
                        .HasDatabaseName("ix_seafarer_checklists_departure_checklist_id");

                    b.HasIndex(new[] { "SeafarerDepartureId" }, "index_seafarer_checklists_on_seafarer_departure_id")
                        .HasDatabaseName("ix_seafarer_checklists_seafarer_departure_id");

                    b.ToTable("seafarer_checklists");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.SeafarerDeparture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FileContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("file_content_type");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying")
                        .HasColumnName("file_name");

                    b.Property<int?>("FileSize")
                        .HasColumnType("integer")
                        .HasColumnName("file_size");

                    b.Property<string>("FileUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("file_url");

                    b.Property<long?>("ReliefId")
                        .HasColumnType("bigint")
                        .HasColumnName("relief_id");

                    b.Property<long?>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<DateTime?>("SeafarerSignedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("seafarer_signed_at");

                    b.Property<string>("ShoreEmployeeName")
                        .HasColumnType("character varying")
                        .HasColumnName("shore_employee_name");

                    b.Property<string>("ShoreUserId")
                        .HasColumnType("character varying")
                        .HasColumnName("shore_user_id");

                    b.Property<DateTime?>("ShoreUserSignedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("shore_user_signed_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_seafarer_departures");

                    b.HasIndex(new[] { "ReliefId" }, "index_seafarer_departures_on_relief_id")
                        .HasDatabaseName("ix_seafarer_departures_relief_id");

                    b.ToTable("seafarer_departures");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.SeafarerReliefRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ApprovalReason")
                        .HasColumnType("character varying")
                        .HasColumnName("approval_reason");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("OtherReason")
                        .HasColumnType("character varying")
                        .HasColumnName("other_reason");

                    b.Property<string>("RejectReason")
                        .HasColumnType("character varying")
                        .HasColumnName("reject_reason");

                    b.Property<DateTime?>("RequestedOn")
                        .HasColumnType("date")
                        .HasColumnName("requested_on");

                    b.Property<long?>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<long?>("SignOffReasonId")
                        .HasColumnType("bigint")
                        .HasColumnName("sign_off_reason_id");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_seafarer_relief_requests");

                    b.HasIndex(new[] { "SeafarerId" }, "index_seafarer_relief_requests_on_seafarer_id")
                        .HasDatabaseName("ix_seafarer_relief_requests_seafarer_id");

                    b.HasIndex(new[] { "SignOffReasonId" }, "index_seafarer_relief_requests_on_sign_off_reason_id")
                        .HasDatabaseName("ix_seafarer_relief_requests_sign_off_reason_id");

                    b.ToTable("seafarer_relief_requests");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.ShoreEmployeeDeviceToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("character varying")
                        .HasColumnName("device_token");

                    b.Property<string>("ShoreEmployeeId")
                        .HasColumnType("character varying")
                        .HasColumnName("shore_employee_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_shore_employee_device_tokens");

                    b.HasIndex(new[] { "ShoreEmployeeId" }, "index_shore_employee_device_tokens_on_shore_employee_id")
                        .HasDatabaseName("ix_shore_employee_device_tokens_shore_employee_id");

                    b.ToTable("shore_employee_device_tokens");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.ShoreEmployeeNotificationLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Body")
                        .HasColumnType("character varying")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("EmailFailedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("email_failed_at");

                    b.Property<DateTime?>("EmailSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("email_sent_at");

                    b.Property<long?>("NotifiableId")
                        .HasColumnType("bigint")
                        .HasColumnName("notifiable_id");

                    b.Property<string>("NotifiableType")
                        .HasColumnType("character varying")
                        .HasColumnName("notifiable_type");

                    b.Property<string>("NotificationType")
                        .HasColumnType("character varying")
                        .HasColumnName("notification_type");

                    b.Property<DateTime?>("PushFailedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("push_failed_at");

                    b.Property<DateTime?>("PushSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("push_sent_at");

                    b.Property<bool?>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("read")
                        .HasDefaultValueSql("false");

                    b.Property<long>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<string>("ShoreEmployeeId")
                        .HasColumnType("character varying")
                        .HasColumnName("shore_employee_id");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Title")
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_shore_employee_notification_logs");

                    b.HasIndex(new[] { "NotifiableType", "NotifiableId" }, "index_shore_employee_notification_logs_on_notifiable")
                        .HasDatabaseName("ix_shore_employee_notification_logs_notifiable_type_notifiable");

                    b.HasIndex(new[] { "SeafarerId" }, "index_shore_employee_notification_logs_on_seafarer_id")
                        .HasDatabaseName("ix_shore_employee_notification_logs_seafarer_id");

                    b.ToTable("shore_employee_notification_logs");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.ShortlistedSeafarer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("ReliefId")
                        .HasColumnType("bigint")
                        .HasColumnName("relief_id");

                    b.Property<long?>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<string>("State")
                        .HasColumnType("character varying")
                        .HasColumnName("state");

                    b.Property<long?>("StatusCode")
                        .HasColumnType("bigint")
                        .HasColumnName("status_code");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_shortlisted_seafarers");

                    b.HasIndex(new[] { "ReliefId" }, "index_shortlisted_seafarers_on_relief_id")
                        .HasDatabaseName("ix_shortlisted_seafarers_relief_id");

                    b.HasIndex(new[] { "SeafarerId" }, "index_shortlisted_seafarers_on_seafarer_id")
                        .HasDatabaseName("ix_shortlisted_seafarers_seafarer_id");

                    b.HasIndex(new[] { "StatusCode" }, "index_shortlisted_seafarers_on_status_code")
                        .HasDatabaseName("ix_shortlisted_seafarers_status_code");

                    b.ToTable("shortlisted_seafarers");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("Code")
                        .HasColumnType("bigint")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Status1")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.ToTable("statuses");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.StatusLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<long?>("LoggableId")
                        .HasColumnType("bigint")
                        .HasColumnName("loggable_id");

                    b.Property<string>("LoggableType")
                        .HasColumnType("character varying")
                        .HasColumnName("loggable_type");

                    b.Property<long?>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<long?>("StatusCode")
                        .HasColumnType("bigint")
                        .HasColumnName("status_code");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_status_logs");

                    b.HasIndex(new[] { "LoggableId" }, "index_status_logs_on_loggable_id")
                        .HasDatabaseName("ix_status_logs_loggable_id");

                    b.HasIndex(new[] { "LoggableType" }, "index_status_logs_on_loggable_type")
                        .HasDatabaseName("ix_status_logs_loggable_type");

                    b.HasIndex(new[] { "SeafarerId" }, "index_status_logs_on_seafarer_id")
                        .HasDatabaseName("ix_status_logs_seafarer_id");

                    b.HasIndex(new[] { "StatusCode" }, "index_status_logs_on_status_code")
                        .HasDatabaseName("ix_status_logs_status_code");

                    b.ToTable("status_logs");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int?>("TaggingsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("taggings_count")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex(new[] { "Name" }, "index_tags_on_name")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_name");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.Tagging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Context")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("context");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.Property<int?>("TaggableId")
                        .HasColumnType("integer")
                        .HasColumnName("taggable_id");

                    b.Property<string>("TaggableType")
                        .HasColumnType("character varying")
                        .HasColumnName("taggable_type");

                    b.Property<int?>("TaggerId")
                        .HasColumnType("integer")
                        .HasColumnName("tagger_id");

                    b.Property<string>("TaggerType")
                        .HasColumnType("character varying")
                        .HasColumnName("tagger_type");

                    b.HasKey("Id")
                        .HasName("pk_taggings");

                    b.HasIndex(new[] { "Context" }, "index_taggings_on_context")
                        .HasDatabaseName("ix_taggings_context");

                    b.HasIndex(new[] { "TagId" }, "index_taggings_on_tag_id")
                        .HasDatabaseName("ix_taggings_tag_id");

                    b.HasIndex(new[] { "TaggableId" }, "index_taggings_on_taggable_id")
                        .HasDatabaseName("ix_taggings_taggable_id");

                    b.HasIndex(new[] { "TaggableType" }, "index_taggings_on_taggable_type")
                        .HasDatabaseName("ix_taggings_taggable_type");

                    b.HasIndex(new[] { "TaggerId" }, "index_taggings_on_tagger_id")
                        .HasDatabaseName("ix_taggings_tagger_id");

                    b.HasIndex(new[] { "TaggerId", "TaggerType" }, "index_taggings_on_tagger_id_and_tagger_type")
                        .HasDatabaseName("ix_taggings_tagger_id_tagger_type");

                    b.HasIndex(new[] { "TagId", "TaggableId", "TaggableType", "Context", "TaggerId", "TaggerType" }, "taggings_idx")
                        .IsUnique()
                        .HasDatabaseName("ix_taggings_tag_id_taggable_id_taggable_type_context_tagger_id");

                    b.HasIndex(new[] { "TaggableId", "TaggableType", "TaggerId", "Context" }, "taggings_idy")
                        .HasDatabaseName("ix_taggings_taggable_id_taggable_type_tagger_id_context");

                    b.HasIndex(new[] { "TaggableId", "TaggableType", "Context" }, "taggings_taggable_context_idx")
                        .HasDatabaseName("ix_taggings_taggable_id_taggable_type_context");

                    b.ToTable("taggings");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.TravelDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AttachmentContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("attachment_content_type");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("character varying")
                        .HasColumnName("attachment_name");

                    b.Property<string>("AttachmentSize")
                        .HasColumnType("character varying")
                        .HasColumnName("attachment_size");

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("attachment_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("CreatedById")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<long>("ReliefId")
                        .HasColumnType("bigint")
                        .HasColumnName("relief_id");

                    b.Property<long>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<long>("TravelDocumentListId")
                        .HasColumnType("bigint")
                        .HasColumnName("travel_document_list_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("UpdatedById")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_travel_documents");

                    b.HasIndex(new[] { "ReliefId" }, "index_travel_documents_on_relief_id")
                        .HasDatabaseName("ix_travel_documents_relief_id");

                    b.HasIndex(new[] { "SeafarerId" }, "index_travel_documents_on_seafarer_id")
                        .HasDatabaseName("ix_travel_documents_seafarer_id");

                    b.HasIndex(new[] { "TravelDocumentListId" }, "index_travel_documents_on_travel_document_list_id")
                        .HasDatabaseName("ix_travel_documents_travel_document_list_id");

                    b.ToTable("travel_documents");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.TravelDocumentList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Identifier")
                        .HasColumnType("character varying")
                        .HasColumnName("identifier");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_travel_document_lists");

                    b.ToTable("travel_document_lists");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.TravelTicketRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("CreatedById")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("departure_time");

                    b.Property<string>("EmailFailedReason")
                        .HasColumnType("character varying")
                        .HasColumnName("email_failed_reason");

                    b.Property<DateTime?>("EmailSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("email_sent_at");

                    b.Property<int?>("EmailStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("email_status")
                        .HasDefaultValueSql("0");

                    b.Property<string>("FlightNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("flight_number");

                    b.Property<string>("FromAirport")
                        .HasColumnType("character varying")
                        .HasColumnName("from_airport");

                    b.Property<string>("FromCity")
                        .HasColumnType("character varying")
                        .HasColumnName("from_city");

                    b.Property<int?>("NumberOfStops")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_stops");

                    b.Property<string>("Pnr")
                        .HasColumnType("character varying")
                        .HasColumnName("pnr");

                    b.Property<long>("ReliefId")
                        .HasColumnType("bigint")
                        .HasColumnName("relief_id");

                    b.Property<long>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<string>("ToAirport")
                        .HasColumnType("character varying")
                        .HasColumnName("to_airport");

                    b.Property<string>("ToCity")
                        .HasColumnType("character varying")
                        .HasColumnName("to_city");

                    b.Property<DateTime?>("TravelDate")
                        .HasColumnType("date")
                        .HasColumnName("travel_date");

                    b.Property<string>("TravelDuration")
                        .HasColumnType("character varying")
                        .HasColumnName("travel_duration");

                    b.Property<int?>("TravelMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("travel_mode")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("TravelTime")
                        .HasColumnType("integer")
                        .HasColumnName("travel_time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("UpdatedById")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.HasKey("Id")
                        .HasName("pk_travel_ticket_requests");

                    b.HasIndex(new[] { "ReliefId" }, "index_travel_ticket_requests_on_relief_id")
                        .HasDatabaseName("ix_travel_ticket_requests_relief_id");

                    b.HasIndex(new[] { "SeafarerId" }, "index_travel_ticket_requests_on_seafarer_id")
                        .HasDatabaseName("ix_travel_ticket_requests_seafarer_id");

                    b.ToTable("travel_ticket_requests");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.UnmatchedSeafarer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("NextAvailabilityDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("next_availability_date");

                    b.Property<long?>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("VesselId")
                        .HasColumnType("bigint")
                        .HasColumnName("vessel_id");

                    b.HasKey("Id")
                        .HasName("pk_unmatched_seafarers");

                    b.ToTable("unmatched_seafarers");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.VesselCombinationMatrix", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<double?>("ExperienceInRank")
                        .HasColumnType("double precision")
                        .HasColumnName("experience_in_rank");

                    b.Property<double?>("ExperienceInSynergy")
                        .HasColumnType("double precision")
                        .HasColumnName("experience_in_synergy");

                    b.Property<double?>("ExperienceInVesselType")
                        .HasColumnType("double precision")
                        .HasColumnName("experience_in_vessel_type");

                    b.Property<bool?>("IsAppraisalBased")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_appraisal_based")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("IsSalaryBased")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_salary_based")
                        .HasDefaultValueSql("false");

                    b.Property<long?>("RankCombinationId")
                        .HasColumnType("bigint")
                        .HasColumnName("rank_combination_id");

                    b.Property<double?>("Salary")
                        .HasColumnType("double precision")
                        .HasColumnName("salary");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.Property<long?>("VesselId")
                        .HasColumnType("bigint")
                        .HasColumnName("vessel_id");

                    b.HasKey("Id")
                        .HasName("pk_vessel_combination_matrices");

                    b.HasIndex(new[] { "RankCombinationId" }, "index_vessel_combination_matrices_on_rank_combination_id")
                        .HasDatabaseName("ix_vessel_combination_matrices_rank_combination_id");

                    b.HasIndex(new[] { "VesselId" }, "index_vessel_combination_matrices_on_vessel_id")
                        .HasDatabaseName("ix_vessel_combination_matrices_vessel_id");

                    b.ToTable("vessel_combination_matrices");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.VesselContract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CdcNumber")
                        .HasColumnType("text")
                        .HasColumnName("cdc_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_id");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("created_by_name");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("ImoNumber")
                        .HasColumnType("text")
                        .HasColumnName("imo_number");

                    b.Property<long?>("NextReviewer")
                        .HasColumnType("bigint")
                        .HasColumnName("next_reviewer");

                    b.Property<long?>("RankId")
                        .HasColumnType("bigint")
                        .HasColumnName("rank_id");

                    b.Property<double?>("Salary")
                        .HasColumnType("double precision")
                        .HasColumnName("salary");

                    b.Property<long?>("SeafarerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seafarer_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("character varying")
                        .HasColumnName("updated_by_name");

                    b.Property<long?>("VesselId")
                        .HasColumnType("bigint")
                        .HasColumnName("vessel_id");

                    b.HasKey("Id")
                        .HasName("pk_vessel_contracts");

                    b.HasIndex(new[] { "CdcNumber" }, "index_vessel_contracts_on_cdc_number")
                        .HasDatabaseName("ix_vessel_contracts_cdc_number");

                    b.HasIndex(new[] { "EndDate" }, "index_vessel_contracts_on_end_date")
                        .HasDatabaseName("ix_vessel_contracts_end_date");

                    b.HasIndex(new[] { "ImoNumber" }, "index_vessel_contracts_on_imo_number")
                        .HasDatabaseName("ix_vessel_contracts_imo_number");

                    b.HasIndex(new[] { "NextReviewer" }, "index_vessel_contracts_on_next_reviewer")
                        .HasDatabaseName("ix_vessel_contracts_next_reviewer");

                    b.HasIndex(new[] { "RankId" }, "index_vessel_contracts_on_rank_id")
                        .HasDatabaseName("ix_vessel_contracts_rank_id");

                    b.HasIndex(new[] { "SeafarerId" }, "index_vessel_contracts_on_seafarer_id")
                        .HasDatabaseName("ix_vessel_contracts_seafarer_id");

                    b.HasIndex(new[] { "StartDate" }, "index_vessel_contracts_on_start_date")
                        .HasDatabaseName("ix_vessel_contracts_start_date");

                    b.HasIndex(new[] { "VesselId" }, "index_vessel_contracts_on_vessel_id")
                        .HasDatabaseName("ix_vessel_contracts_vessel_id");

                    b.ToTable("vessel_contracts");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.AgentLetter", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.Relief", "Relief")
                        .WithMany("AgentLetters")
                        .HasForeignKey("ReliefId")
                        .HasConstraintName("fk_rails_759038253d")
                        .IsRequired();

                    b.Navigation("Relief");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.ContractForm", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.VesselContract", "VesselContract")
                        .WithMany("ContractForms")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("fk_contract_form_vessel_contracts_vessel_contract_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VesselContract");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.ContractReviewer", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.VesselContract", "VesselContracts")
                        .WithMany("ContractReviewers")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("fk_contract_reviewers_vessel_contracts_contract_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VesselContracts");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.FleetCombinationMatrix", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.RankCombination", "RankCombination")
                        .WithMany("FleetCombinationMatrices")
                        .HasForeignKey("RankCombinationId")
                        .HasConstraintName("fk_rails_a4cbe22a41");

                    b.Navigation("RankCombination");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.RecommendationList", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.Relief", "Relief")
                        .WithMany("RecommendationLists")
                        .HasForeignKey("ReliefId")
                        .HasConstraintName("fk_rails_6e39a05c1d");

                    b.Navigation("Relief");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.Relief", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.VesselContract", "VesselContract")
                        .WithMany("Reliefs")
                        .HasForeignKey("VesselContractId")
                        .HasConstraintName("fk_rails_0fce2aacd2");

                    b.Navigation("VesselContract");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.ShortlistedSeafarer", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.Relief", "Relief")
                        .WithMany("ShortlistedSeafarers")
                        .HasForeignKey("ReliefId")
                        .HasConstraintName("fk_rails_1b45fbe51e");

                    b.Navigation("Relief");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.Tagging", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.Tag", "Tag")
                        .WithMany("Taggings")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_rails_9fcd2e236b");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.TravelDocument", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.Relief", "Relief")
                        .WithMany("TravelDocuments")
                        .HasForeignKey("ReliefId")
                        .HasConstraintName("fk_rails_cf196a1cf9")
                        .IsRequired();

                    b.HasOne("Synergy.ReliefCenter.Data.Models.TravelDocumentList", "TravelDocumentList")
                        .WithMany("TravelDocuments")
                        .HasForeignKey("TravelDocumentListId")
                        .HasConstraintName("fk_rails_6fd76d1d05")
                        .IsRequired();

                    b.Navigation("Relief");

                    b.Navigation("TravelDocumentList");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.TravelTicketRequest", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.Relief", "Relief")
                        .WithMany("TravelTicketRequests")
                        .HasForeignKey("ReliefId")
                        .HasConstraintName("fk_rails_94af2b1244")
                        .IsRequired();

                    b.Navigation("Relief");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.VesselCombinationMatrix", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.RankCombination", "RankCombination")
                        .WithMany("VesselCombinationMatrices")
                        .HasForeignKey("RankCombinationId")
                        .HasConstraintName("fk_rails_9160600425");

                    b.Navigation("RankCombination");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.VesselContract", b =>
                {
                    b.HasOne("Synergy.ReliefCenter.Data.Models.ContractReviewer", "Reviewer")
                        .WithMany("Contract")
                        .HasForeignKey("NextReviewer")
                        .HasConstraintName("fk_vessel_contracts_contract_reviewers_next_reviewer");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.ContractReviewer", b =>
                {
                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.RankCombination", b =>
                {
                    b.Navigation("FleetCombinationMatrices");

                    b.Navigation("VesselCombinationMatrices");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.Relief", b =>
                {
                    b.Navigation("AgentLetters");

                    b.Navigation("RecommendationLists");

                    b.Navigation("ShortlistedSeafarers");

                    b.Navigation("TravelDocuments");

                    b.Navigation("TravelTicketRequests");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.Tag", b =>
                {
                    b.Navigation("Taggings");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.TravelDocumentList", b =>
                {
                    b.Navigation("TravelDocuments");
                });

            modelBuilder.Entity("Synergy.ReliefCenter.Data.Models.VesselContract", b =>
                {
                    b.Navigation("ContractForms");

                    b.Navigation("ContractReviewers");

                    b.Navigation("Reliefs");
                });
#pragma warning restore 612, 618
        }
    }
}
