on:
  push:
    branches:
      - hotfix/docker-build-github-failing
      
name: Deploy to Amazon ECS - Synergy Dev  -  Crew Wage API

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push relief image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: 460835339073.dkr.ecr.ap-south-1.amazonaws.com
        ECR_REPOSITORY: relief-dotnet-dev-test
        IMAGE_TAG: ${{ github.sha }}
        REGION: ap-south-1  
        ECS_CLUSTER: relief-dotnet-dev-test
        SERVICE_NAME: relief-dotnet-dev-test
        NUGET_SRC: ${{ secrets.NUGET_SRC }}
        NUGET_NS: ${{ secrets.NUGET_NS }}
        NUGET_USER: ${{ secrets.NUGET_USER }}
        NUGET_SECRET: ${{ secrets.NUGET_SECRET }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd src
        docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg NUGET_SRC=$NUGET_SRC --build-arg NUGET_NS=$NUGET_NS --build-arg NUGET_USER=$NUGET_USER --build-arg NUGET_SECRET=$NUGET_SECRET ../.
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-dev.json
        container-name: relief-dotnet
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: relief-dotnet
        cluster: relief-dotnet-dev-test
        wait-for-service-stability: true

    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took 
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
      if: always() 

